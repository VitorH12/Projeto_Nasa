"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/historias/babilonios/page",{

/***/ "(app-pages-browser)/./components/StoryPage.js":
/*!*********************************!*\
  !*** ./components/StoryPage.js ***!
  \*********************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StoryPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"(app-pages-browser)/./node_modules/styled-jsx/style.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n// src/components/StoryPage.js\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n // Importe React para usar React.Fragment\nfunction StoryPage(param) {\n    let { imageSrc, imageAlt, storyText, interactiveNote } = param;\n    _s();\n    const [noteVisible, setNoteVisible] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    // Inicializamos realtimeData como string vazia ou com o placeholder, mas o useEffect principal lidará com isso\n    const [realtimeData, setRealtimeData] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)('');\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    // Novo estado para controlar se os dados da API para esta NOTA já foram carregados\n    const [apiDataLoaded, setApiDataLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    // Função para buscar dados da API\n    const fetchRealtimeData = async ()=>{\n        if (!interactiveNote) return;\n        // Evita múltiplas requisições se já estiver carregando ou se já carregou os dados para esta nota\n        if (isLoading || apiDataLoaded) {\n            console.log('API call skipped: already loading or data already loaded for this note.');\n            return;\n        }\n        setIsLoading(true); // Indica que o carregamento começou\n        // Define um estado temporário para 'carregando' para o usuário ver\n        setRealtimeData('Buscando dados da NASA...');\n        const apiKey = \"u5NsMGeGaw39nszCF7A1M6WGjPHgejOnVxVbVXBI\"; // SUA CHAVE AQUI! \n        if (!apiKey || apiKey.length < 20) {\n            setRealtimeData('Erro: API Key da NASA não configurada ou inválida no código.');\n            setIsLoading(false);\n            setApiDataLoaded(true); // Marca como carregado (com erro) para não tentar de novo imediatamente\n            return;\n        }\n        const today = new Date().toISOString().split('T')[0]; // Data de hoje (YYYY-MM-DD)\n        const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]; // 7 dias atrás\n        try {\n            // Lógica para Erupções Solares (Flares)\n            if (interactiveNote.title.includes('Erupções Solares (Flares)')) {\n                const response = await fetch(\"https://api.nasa.gov/DONKI/FLR?startDate=\".concat(sevenDaysAgo, \"&endDate=\").concat(today, \"&api_key=\").concat(apiKey));\n                if (!response.ok) {\n                    throw new Error(\"HTTP error! status: \".concat(response.status));\n                }\n                const data = await response.json();\n                let apiResultText;\n                if (data && data.length > 0) {\n                    const latestFlare = data.sort((a, b)=>new Date(b.beginTime).getTime() - new Date(a.beginTime).getTime())[0];\n                    const flareClass = latestFlare.classType || latestFlare.flr_goescls || 'Desconhecida';\n                    const formattedNote = latestFlare.note ? 'Uma curiosidade que os cientistas viram: \"'.concat(latestFlare.note, '\"') : '';\n                    apiResultText = \"Olha s\\xf3 o que o Sol fez recentemente!\\n\" + \"No dia \".concat(new Date(latestFlare.beginTime).toLocaleDateString('pt-BR'), \", por volta das \").concat(new Date(latestFlare.beginTime).toLocaleTimeString('pt-BR', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        timeZone: 'UTC'\n                    }), \" UTC,\\n\") + \"houve um grande 'espirro' de luz e energia, uma Erup\\xe7\\xe3o Solar de Classe \".concat(flareClass, \"! As erup\\xe7\\xf5es solares s\\xe3o classificadas pelas suas classes A, B, C, M e X, com a classe X a ser a mais energ\\xe9tica e a classe A a mais fraca\\n\") + \"O momento mais forte desse 'espirro' foi \\xe0s \".concat(new Date(latestFlare.peakTime).toLocaleTimeString('pt-BR', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        timeZone: 'UTC'\n                    }), \" UTC.\\n\") + \"Ele veio de uma parte do Sol chamada \".concat(latestFlare.sourceLocation || 'Não especificada', \".\\n\\n\") + \"\".concat(formattedNote, \"\\n\\n\");\n                } else {\n                    apiResultText = 'Nenhuma erupção solar (sopro de fogo) detectada nos últimos 7 dias.';\n                }\n                setRealtimeData(apiResultText);\n            } else if (interactiveNote.title.includes('Manchas Solares')) {\n                function getMagClassDescription(magClass) {\n                    if (!magClass) return 'com magnetismo desconhecido';\n                    const lowerMagClass = magClass.toLowerCase();\n                    // Simplificação das classes magnéticas para uma descrição infantil\n                    if (lowerMagClass.includes('delta') || lowerMagClass.includes('gamma')) {\n                        return '**magnetismo MUITO apertado e cheio de energia** (potencial para grandes \"espirros\")';\n                    } else if (lowerMagClass.includes('b')) {\n                        return '**magnetismo um pouco apertado** (potencial para \"espirros\" médios)';\n                    } else if (lowerMagClass.includes('alpha') || lowerMagClass === 'a') {\n                        return '**magnetismo calmo** (baixo potencial para \"espirros\")';\n                    }\n                    return '**magnetismo que os cientistas estão observando**';\n                }\n                try {\n                    const response = await fetch(\"https://services.swpc.noaa.gov/json/sunspot_report.json\");\n                    if (!response.ok) {\n                        throw new Error(\"HTTP error! status: \".concat(response.status));\n                    }\n                    const data = await response.json();\n                    let apiResultText = '';\n                    if (data && data.length > 0) {\n                        // Ordena os relatórios pela data/hora mais recente para pegar a observação mais nova\n                        const sortedReports = data.sort((a, b)=>new Date(b.time_tag).getTime() - new Date(a.time_tag).getTime());\n                        const latestReport = sortedReports[0]; // A observação mais recente\n                        // Contar o número de regiões ativas únicas na observação mais recente (ou no total)\n                        const uniqueRegions = new Set(data.map((spot)=>spot.Region));\n                        const numberOfActiveRegions = uniqueRegions.size;\n                        const regionNum = latestReport.Region || 'Desconhecido';\n                        const location = latestReport.Location || 'Não especificada';\n                        const numSpots = latestReport.Numspot > 0 ? latestReport.Numspot : 'poucas';\n                        const magClass = latestReport.Magclass || 'Não informada';\n                        const magDescription = getMagClassDescription(magClass); // <--- Chama a nova função aqui!\n                        const obsTime = new Date(latestReport.time_tag).toLocaleString('pt-BR', {\n                            dateStyle: 'short',\n                            timeStyle: 'short'\n                        });\n                        // Decidir como apresentar a informação\n                        if (numberOfActiveRegions > 1) {\n                            apiResultText = \"Os cientistas do NOAA est\\xe3o observando **\".concat(numberOfActiveRegions, ' regi\\xf5es ativas** com \"sombras\" no Sol!<br/><br/>') + \"A mais recente observa\\xe7\\xe3o, de **\".concat(obsTime, \"**, detalha a **Regi\\xe3o Solar #\").concat(regionNum, \"**.<br/>\") + \"Ela est\\xe1 em **\".concat(location, \"**, com **\").concat(numSpots, \" mancha(s) solar(es)** e tem um **magnetismo de classe \").concat(magClass, \", que se caracteriza como um \").concat(magDescription, \"**.<br/>\") + \"\\xc9 nessas \\xe1reas com muita energia 'guardada' que Kuarasy pode ter um grande \\\"espirro\\\" (erup\\xe7\\xe3o solar)!\";\n                        } else {\n                            apiResultText = 'Os cientistas do NOAA est\\xe3o observando as \"sombras\" no Sol!<br/><br/>' + \"A \\xfaltima observa\\xe7\\xe3o, de **\".concat(obsTime, \"**, detalha a **Regi\\xe3o Solar #\").concat(regionNum, \"**.<br/>\") + \"Ela est\\xe1 em **\".concat(location, \"**, com **\").concat(numSpots, \" mancha(s) solar(es)** e tem um **magnetismo de classe \").concat(magClass, \", que se caracteriza como um \").concat(magDescription, \"**.<br/>\") + 'Essa \\xe9 a principal \\xe1rea onde Kuarasy est\\xe1 concentrando sua energia, podendo ter \"espirros\" fortes (erup\\xe7\\xf5es solares)!';\n                        }\n                    } else {\n                        apiResultText = 'Nenhuma região ativa (mancha solar) significativa detectada no Sol agora. Kuarasy está com o rosto \"limpo\" e calmo!';\n                    }\n                    setRealtimeData(apiResultText);\n                } catch (error) {\n                    console.error(\"Erro ao buscar dados de manchas solares:\", error);\n                    setRealtimeData('Erro ao carregar dados de manchas solares. Verifique sua conexão ou a API Key. Tente novamente mais tarde.');\n                }\n            } else if (interactiveNote.title.includes('Vento Solar e Auroras')) {\n                const response = await fetch(\"https://api.nasa.gov/DONKI/GST?startDate=\".concat(sevenDaysAgo, \"&endDate=\").concat(today, \"&api_key=\").concat(apiKey));\n                if (!response.ok) {\n                    throw new Error(\"HTTP error! status: \".concat(response.status));\n                }\n                const data = await response.json();\n                let apiResultText;\n                if (data && data.length > 0) {\n                    const latestStorm = data.sort((a, b)=>new Date(b.startTime).getTime() - new Date(a.startTime).getTime())[0];\n                    const kpValue = latestStorm.allKpIndex && latestStorm.allKpIndex.length > 0 ? latestStorm.allKpIndex[0].kpIndex : 'N/A';\n                    apiResultText = \"A tempestade geomagn\\xe9tica mais recente teve um **N\\xedvel Kp de \".concat(kpValue, \"**.<br/><br/>\") + \"O \\xcdndice Kp mede a agita\\xe7\\xe3o do campo magn\\xe9tico da Terra (de 0 a 9). N\\xedveis altos (de 5 para cima) significam uma chance muito maior de ver as luzes m\\xe1gicas das auroras brilhando no c\\xe9u!\";\n                } else {\n                    apiResultText = 'Nenhuma tempestade geomagnética recente detectada nos últimos 7 dias. Baixa chance de auroras.';\n                }\n                setRealtimeData(apiResultText);\n            } else if (interactiveNote.title.includes('Ejeções de Massa Coronal (CMEs)')) {\n                const response = await fetch(\"https://api.nasa.gov/DONKI/CME?startDate=\".concat(sevenDaysAgo, \"&endDate=\").concat(today, \"&api_key=\").concat(apiKey));\n                if (!response.ok) {\n                    throw new Error(\"HTTP error! status: \".concat(response.status));\n                }\n                const data = await response.json();\n                let apiResultText;\n                if (data && data.length > 0) {\n                    const relevantCMEs = data.filter((cme)=>cme.cmeAnalyses && cme.cmeAnalyses.length > 0 && cme.cmeAnalyses[0].isMostAccurate).sort((a, b)=>new Date(b.startTime).getTime() - new Date(a.startTime).getTime());\n                    if (relevantCMEs.length > 0) {\n                        const latestCME = relevantCMEs[0];\n                        const analysis = latestCME.cmeAnalyses[0];\n                        const startTime = new Date(latestCME.startTime).toLocaleString('pt-BR', {\n                            dateStyle: 'short',\n                            timeStyle: 'short',\n                            timeZone: 'UTC'\n                        }) + ' UTC';\n                        const speed = analysis.speed ? \"\".concat(Math.round(analysis.speed), \" km/s\") : 'Desconhecida';\n                        const halfAngle = analysis.halfAngle ? \"\".concat(analysis.halfAngle, \"\\xb0\") : 'Desconhecido';\n                        const sourceLocation = latestCME.sourceLocation || 'Não especificada';\n                        const note = latestCME.note || 'Sem detalhes adicionais.';\n                        let impactStatus = 'Não há previsão de impacto direto na Terra.';\n                        let arrivalTime = '';\n                        if (analysis.enlilList && analysis.enlilList.length > 0) {\n                            const enlilAnalysis = analysis.enlilList[0];\n                            if (enlilAnalysis.isEarthGB) {\n                                impactStatus = 'Pode haver um impacto de \"raspão\" (leve) na Terra!';\n                            } else if (enlilAnalysis.isEarthMinorImpact || enlilAnalysis.isEarthModerateImpact || enlilAnalysis.isEarthHighImpact) {\n                                impactStatus = 'Há previsão de um impacto na Terra!';\n                            }\n                            if (enlilAnalysis.estimatedShockArrivalTime) {\n                                arrivalTime = \"<strong>Previs\\xe3o de Chegada:</strong> \".concat(new Date(enlilAnalysis.estimatedShockArrivalTime).toLocaleString('pt-BR', {\n                                    dateStyle: 'full',\n                                    timeStyle: 'short',\n                                    timeZone: 'UTC'\n                                }), \" UTC.\");\n                            } else if (impactStatus !== 'Não há previsão de impacto direto na Terra.') {\n                                arrivalTime = '<strong>Ainda não há previsão de horário de chegada.</strong>';\n                            }\n                        }\n                        apiResultText = \"<h3>\\xdaltima Eje\\xe7\\xe3o de Massa Coronal (CME) Registrada:</h3>\" + '<div style=\"margin-bottom: 1.5rem;\">' + \"<strong>In\\xedcio:</strong> \".concat(startTime, \"<br />\") + \"<strong>Velocidade:</strong> \".concat(speed, \"<br />\") + \"<strong>\\xc2ngulo:</strong> \".concat(halfAngle, \"<br />\") + \"<strong>Origem:</strong> \".concat(sourceLocation, \"<br />\") + \"<strong>Impacto na Terra:</strong> \".concat(impactStatus, \"<br />\") + \"\".concat(arrivalTime ? \"\".concat(arrivalTime, \"<br />\") : '') + '<em>Observa\\xe7\\xe3o dos Cientistas:</em> \"'.concat(note, '\"') + \"</div>\";\n                    } else {\n                        apiResultText = 'Nenhuma Ejeção de Massa Coronal (suspiro forte) com análise precisa detectada nos últimos 7 dias.';\n                    }\n                } else {\n                    apiResultText = 'Nenhuma Ejeção de Massa Coronal (suspiro forte) detectada nos últimos 7 dias.';\n                }\n                setRealtimeData(apiResultText);\n            } else if (interactiveNote.title.includes('Tempestades Geomagnéticas') || interactiveNote.title.includes('Índice Kp')) {\n                const response = await fetch(\"https://api.nasa.gov/DONKI/GST?startDate=\".concat(sevenDaysAgo, \"&endDate=\").concat(today, \"&api_key=\").concat(apiKey));\n                if (!response.ok) {\n                    throw new Error(\"HTTP error! status: \".concat(response.status));\n                }\n                const data = await response.json();\n                let apiResultText;\n                if (data && data.length > 0) {\n                    const latestStorm = data.sort((a, b)=>new Date(b.startTime).getTime() - new Date(a.startTime).getTime())[0];\n                    const kpValue = latestStorm.allKpIndex && latestStorm.allKpIndex.length > 0 ? latestStorm.allKpIndex[0].kpIndex : 'N/A';\n                    let impactAnalysis = '';\n                    if (kpValue >= 7) {\n                        impactAnalysis = '**CUIDADO! N\\xedvel MUITO ALTO!** Isso pode realmente \"silenciar vozes\" e \"apagar luzes\": h\\xe1 risco de grandes interrup\\xe7\\xf5es em redes el\\xe9tricas, problemas s\\xe9rios em sinais de r\\xe1dio e GPS, e sat\\xe9lites podem ser afetados. E sim, voc\\xea veria auroras espetaculares se estivesse no lugar certo!';\n                    } else if (kpValue >= 5) {\n                        impactAnalysis = '**N\\xedvel MODERADO.** Pode causar algumas falhas em redes el\\xe9tricas fracas e problemas em sistemas de navega\\xe7\\xe3o. As comunica\\xe7\\xf5es de r\\xe1dio podem ficar \"com chiado\". Tamb\\xe9m \\xe9 uma \\xf3tima condi\\xe7\\xe3o para ver auroras!';\n                    } else {\n                        impactAnalysis = '**N\\xedvel CALMO.** Atualmente, o campo magn\\xe9tico da Terra est\\xe1 est\\xe1vel, com baixo risco de impactos tecnol\\xf3gicos. As \"tempestades invis\\xedveis\" de Kuarasy est\\xe3o tranquilas agora.';\n                    }\n                    apiResultText = \"O \\xfaltimo registro mostra uma tempestade geomagn\\xe9tica com **\\xcdndice Kp de \".concat(kpValue, \"**.<br/><br/>\") + \"**A ci\\xeancia nos diz:** \".concat(impactAnalysis);\n                } else {\n                    apiResultText = 'Nenhuma tempestade geomagnética significativa detectada nos últimos 7 dias. O Sol e a Terra estão calmos, sem grandes \"tempestades invisíveis\".';\n                }\n                setRealtimeData(apiResultText);\n            }\n        } catch (error) {\n            console.error(\"Erro ao buscar dados da API da NASA:\", error);\n            setRealtimeData('Erro ao carregar dados. Verifique sua conexão ou a API Key. Tente novamente mais tarde.');\n        } finally{\n            setIsLoading(false);\n            setApiDataLoaded(true); // Marca que a tentativa de carregar a API para esta nota foi feita.\n        }\n    };\n    // Efeito para buscar dados da API quando a nota se torna visível (e os dados ainda não foram carregados)\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"StoryPage.useEffect\": ()=>{\n            // Só tenta buscar se a nota está visível, se há interactiveNote e se ela realmente precisa de dados em tempo real\n            if (noteVisible && interactiveNote && interactiveNote.realtimeDataText) {\n                // Se os dados da API para esta nota ainda não foram carregados\n                if (!apiDataLoaded) {\n                    fetchRealtimeData();\n                }\n            } else if (!noteVisible) {\n                setApiDataLoaded(false);\n            }\n        }\n    }[\"StoryPage.useEffect\"], [\n        noteVisible,\n        interactiveNote,\n        apiDataLoaded,\n        isLoading\n    ]); // Removido 'realtimeData' daqui\n    // Efeito para definir o realtimeData inicial (placeholder) quando o componente é montado ou a interactiveNote muda\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"StoryPage.useEffect\": ()=>{\n            if (interactiveNote && interactiveNote.realtimeDataText) {\n                setRealtimeData(interactiveNote.realtimeDataText);\n                setApiDataLoaded(false); // Garante que, se a nota mudar (nova página com nova nota), os dados precisarão ser carregados novamente\n            } else {\n                setRealtimeData(''); // Limpa o realtimeData se não houver nota interativa ou realtimeDataText\n                setApiDataLoaded(false);\n            }\n        }\n    }[\"StoryPage.useEffect\"], [\n        interactiveNote\n    ]); // Depende apenas de interactiveNote\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"jsx-5258a6f3ad02174a\" + \" \" + \"book-page-container\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"jsx-5258a6f3ad02174a\" + \" \" + \"left-page\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    src: imageSrc,\n                    alt: imageAlt,\n                    width: 832,\n                    height: 1248,\n                    style: {\n                        width: '100%',\n                        height: 'auto',\n                        display: 'block',\n                        objectFit: 'cover',\n                        objectPosition: 'center'\n                    }\n                }, void 0, false, {\n                    fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                    lineNumber: 283,\n                    columnNumber: 17\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                lineNumber: 282,\n                columnNumber: 13\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"jsx-5258a6f3ad02174a\" + \" \" + \"right-page\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        dangerouslySetInnerHTML: {\n                            __html: storyText\n                        },\n                        className: \"jsx-5258a6f3ad02174a\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                        lineNumber: 298,\n                        columnNumber: 17\n                    }, this),\n                    interactiveNote && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"jsx-5258a6f3ad02174a\" + \" \" + \"interactive-section\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    setNoteVisible(!noteVisible);\n                                },\n                                disabled: isLoading,\n                                className: \"jsx-5258a6f3ad02174a\",\n                                children: isLoading ? 'Carregando...' : noteVisible ? 'Esconder Detalhes' : interactiveNote.buttonText\n                            }, void 0, false, {\n                                fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                lineNumber: 302,\n                                columnNumber: 25\n                            }, this),\n                            noteVisible && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"jsx-5258a6f3ad02174a\" + \" \" + \"interactive-note-box\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"jsx-5258a6f3ad02174a\",\n                                        children: interactiveNote.title\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                        lineNumber: 310,\n                                        columnNumber: 33\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        dangerouslySetInnerHTML: {\n                                            __html: interactiveNote.content\n                                        },\n                                        className: \"jsx-5258a6f3ad02174a\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                        lineNumber: 311,\n                                        columnNumber: 33\n                                    }, this),\n                                    interactiveNote.realtimeDataText && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        dangerouslySetInnerHTML: {\n                                            __html: (realtimeData || '').replace(/\\n/g, '<br />')\n                                        },\n                                        className: \"jsx-5258a6f3ad02174a\" + \" \" + \"realtime-data\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                        lineNumber: 314,\n                                        columnNumber: 37\n                                    }, this),\n                                    interactiveNote.moreInfoLink && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                        href: interactiveNote.moreInfoLink,\n                                        target: \"_blank\",\n                                        rel: \"noopener noreferrer\",\n                                        className: \"jsx-5258a6f3ad02174a\" + \" \" + \"more-info-link\",\n                                        children: \"Saiba Mais na NASA →\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                        lineNumber: 318,\n                                        columnNumber: 37\n                                    }, this),\n                                    interactiveNote.source && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"em\", {\n                                        className: \"jsx-5258a6f3ad02174a\" + \" \" + \"source-text\",\n                                        children: interactiveNote.source\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                        lineNumber: 328,\n                                        columnNumber: 60\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                                lineNumber: 309,\n                                columnNumber: 29\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                        lineNumber: 301,\n                        columnNumber: 21\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n                lineNumber: 297,\n                columnNumber: 13\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__, {\n                id: \"5258a6f3ad02174a\",\n                children: '.book-page-container.jsx-5258a6f3ad02174a{display:flex;align-items:flex-start;width:100%;max-width:1100px;margin:2rem auto;background-color:#fdfaf1;border-radius:8px;box-shadow:0 10px 30px rgba(0,0,0,.2),0 0 10px rgba(0,0,0,.1)inset;overflow:hidden;border:1px solid#dcd3b8}.left-page.jsx-5258a6f3ad02174a,.right-page.jsx-5258a6f3ad02174a{width:50%;position:relative}.left-page.jsx-5258a6f3ad02174a{padding:0;display:flex;align-items:center;justify-content:center;background-color:#e0d8c0}.right-page.jsx-5258a6f3ad02174a{padding:3rem;display:flex;flex-direction:column;justify-content:flex-start;font-family:\"Georgia\",serif;font-size:1.1em;line-height:1.7;color:#4a4a4a;border-left:1px dashed#dcd3b8;min-height:100%}.interactive-section.jsx-5258a6f3ad02174a{margin-top:2rem}button.jsx-5258a6f3ad02174a{background-color:#8b4513;color:white;border:none;padding:.8rem 1.5rem;border-radius:5px;cursor:pointer;font-size:.9em;transition:background-color.3s ease}button.jsx-5258a6f3ad02174a:hover:not(:disabled){background-color:#a0522d}button.jsx-5258a6f3ad02174a:disabled{background-color:#c5bba8;cursor:not-allowed}.interactive-note-box.jsx-5258a6f3ad02174a{margin-top:1rem;padding:1rem;background-color:#f5f0e1;border-left:4px solid#8b4513}.interactive-note-box.jsx-5258a6f3ad02174a h3.jsx-5258a6f3ad02174a{color:#8b4513;font-size:1.2em;display:block;margin-bottom:.5rem}.realtime-data.jsx-5258a6f3ad02174a{font-weight:normal;color:#5c4033;white-space:pre-wrap;margin-top:1rem}.realtime-data.jsx-5258a6f3ad02174a strong.jsx-5258a6f3ad02174a{font-weight:bold;color:#c23b22}.source-text.jsx-5258a6f3ad02174a{font-size:.8em;color:#777;margin-top:.5rem;display:block}.more-info-link.jsx-5258a6f3ad02174a{display:inline-block;margin-top:1rem;color:#007bff;text-decoration:none;font-weight:bold;transition:color.3s ease}.more-info-link.jsx-5258a6f3ad02174a:hover{color:#0056b3;text-decoration:underline}@media(max-width:768px){.book-page-container.jsx-5258a6f3ad02174a{flex-direction:column}.left-page.jsx-5258a6f3ad02174a,.right-page.jsx-5258a6f3ad02174a{width:100%}.right-page.jsx-5258a6f3ad02174a{padding:1.5rem;border-left:none;border-top:1px dashed#dcd3b8}}'\n            }, void 0, false, void 0, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\nasa_projeto\\\\frontend\\\\components\\\\StoryPage.js\",\n        lineNumber: 281,\n        columnNumber: 9\n    }, this);\n}\n_s(StoryPage, \"5rQZ08vZcXUvtMkmabM6gdN7AaQ=\");\n_c = StoryPage;\nvar _c;\n$RefreshReg$(_c, \"StoryPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/StoryPage.js\n"));

/***/ })

});